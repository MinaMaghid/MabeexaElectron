import { contextBridge, ipcRenderer } from 'electron';

contextBridge.exposeInMainWorld('api', {
    addExpense: (amount, category, note, date) => ipcRenderer.invoke('add-expense', amount, category, note, date),
    addProduct: (name, sku, barcode, price, cost_price, quantity) => ipcRenderer.invoke('add-product', name, sku, barcode, price, cost_price, quantity),
    addPurchase: (supplierId, products, invoiceDate) => ipcRenderer.invoke('add-purchase', supplierId, products, invoiceDate),
    addUser: (username, password, role) => ipcRenderer.invoke('add-user', username, password, role),
    addSupplier: (name, contact, address) => ipcRenderer.invoke('add-supplier', name, contact, address),
    addCustomer: (name, contact, address) => ipcRenderer.invoke('add-customer', name, contact, address),
    deleteProduct: (id) => ipcRenderer.invoke('delete-product', id),
    deleteUser: (id) => ipcRenderer.invoke('delete-user', id),
    deleteSupplier: (id) => ipcRenderer.invoke('delete-supplier', id),
    deleteCustomer: (id) => ipcRenderer.invoke('delete-customer', id),
    generateBarcode: (text, type) => ipcRenderer.invoke('generate-barcode', text, type),
    getCategories: () => ipcRenderer.invoke('get-categories'),
    getDashboardStats: () => ipcRenderer.invoke('get-dashboard-stats'),
    getExpenses: (filters) => ipcRenderer.invoke('get-expenses', filters),
    getProducts: () => ipcRenderer.invoke('get-products'),
    getPurchases: () => ipcRenderer.invoke('get-purchases'),
    getSales: (filters) => ipcRenderer.invoke('get-sales', filters),
    getSuppliers: () => ipcRenderer.invoke('get-suppliers'),
    getSupplierTransactions: (supplierId) => ipcRenderer.invoke('get-supplier-transactions', supplierId),
    getUserByUsername: (username) => ipcRenderer.invoke('get-user-by-username', username),
    getUsers: () => ipcRenderer.invoke('get-users'),
    getCustomerPurchases: (customerId) => ipcRenderer.invoke('get-customer-purchases', customerId),
    updateProduct: (id, name, sku, barcode, price, cost_price, quantity) => ipcRenderer.invoke('update-product', id, name, sku, barcode, price, cost_price, quantity),
    updateUser: (id, username, role) => ipcRenderer.invoke('update-user', id, username, role),
    updateSupplier: (id, name, contact, address) => ipcRenderer.invoke('update-supplier', id, name, contact, address),
    updateCustomer: (id, name, contact, address) => ipcRenderer.invoke('update-customer', id, name, contact, address),
    verifyPassword: (username, password) => ipcRenderer.invoke('verify-password', username, password),
    getTotalExpenses: () => ipcRenderer.invoke('get-total-expenses'),
    addDamagedItem: (productId, quantity, note, date) => ipcRenderer.invoke('add-damaged-item', productId, quantity, note, date),
    getDamagedItems: () => ipcRenderer.invoke('get-damaged-items'),
    addBankAccount: (name, type, balance) => ipcRenderer.invoke('add-bank-account', name, type, balance),
    getBankAccounts: () => ipcRenderer.invoke('get-bank-accounts'),
    addTransaction: (accountId, amount, reference, date, direction) => ipcRenderer.invoke('add-transaction', accountId, amount, reference, date, direction),
    getTransactions: (accountId) => ipcRenderer.invoke('get-transactions', accountId),
    getSettings: () => ipcRenderer.invoke('get-settings'),
    setSetting: (key, value) => ipcRenderer.invoke('set-setting', key, value),
    getSalesReport: (startDate, endDate) => ipcRenderer.invoke('get-sales-report', startDate, endDate),
    getProfitLossReport: (startDate, endDate) => ipcRenderer.invoke('get-profit-loss-report', startDate, endDate),
    getStockReport: () => ipcRenderer.invoke('get-stock-report'),
    getCustomerBalance: (customerId) => ipcRenderer.invoke('get-customer-balance', customerId),
    getSupplierBalance: (supplierId) => ipcRenderer.invoke('get-supplier-balance', supplierId),
    createBackup: () => ipcRenderer.invoke('create-backup'),
    restoreBackup: (backupFilePath) => ipcRenderer.invoke('restore-backup', backupFilePath),
    listBackups: () => ipcRenderer.invoke('list-backups'),
    validateLicense: (licenseKey) => ipcRenderer.invoke('validate-license', licenseKey),
    getLicenseStatus: () => ipcRenderer.invoke('get-license-status'),
    printReceipt: (htmlContent, printerName) => ipcRenderer.invoke('print-receipt', htmlContent, printerName),
    printA4: (htmlContent, printerName) => ipcRenderer.invoke('print-a4', htmlContent, printerName),
    addPackage: (name, items) => ipcRenderer.invoke('add-package', name, items),
    getPackages: () => ipcRenderer.invoke('get-packages'),
    getPackageItems: (packageId) => ipcRenderer.invoke('get-package-items', packageId),
    login: (username, password) => ipcRenderer.invoke('login', username, password),
    logAction: (user, action, details) => ipcRenderer.invoke('log-action', user, action, details),
    getAuditLogs: () => ipcRenderer.invoke('get-audit-logs'),
    exportInventoryCSV: (filePath) => ipcRenderer.invoke('export-inventory-csv', filePath),
    importInventoryCSV: (filePath) => ipcRenderer.invoke('import-inventory-csv', filePath),
});